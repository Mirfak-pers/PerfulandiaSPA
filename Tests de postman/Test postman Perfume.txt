# Postman Test Cases for PerfumeController

## 1. Obtener todos los perfumes
- **Método:** GET  
- **URL:** http://localhost:8080/perfumes  
- **Headers:** Accept: application/json  
- **Tests:**  
    - Respuesta 200 OK y body es un array (puede estar vacío o tener objetos Perfume)  

---

## 2. Crear un perfume
- **Método:** POST  
- **URL:** http://localhost:8080/perfumes  
- **Headers:** Content-Type: application/json  
- **Body (JSON):**
    ```json
    {
        "id": 1,
        "nombrePerfume": "Aqua",
        "marca": "MarcaX",
        "precio": 10000,
        "fechaPublicacion": 20240601
    }
    ```
- **Tests:**  
    - Respuesta 201 Created y body contiene el objeto Perfume creado  

---

## 3. Obtener un perfume por ID (existente)
- **Método:** GET  
- **URL:** http://localhost:8080/perfumes/1  
- **Headers:** Accept: application/json  
- **Tests:**  
    - Respuesta 200 OK y body contiene el objeto Perfume con id=1  

---

## 4. Obtener un perfume por ID (no existente)
- **Método:** GET  
- **URL:** http://localhost:8080/perfumes/9999  
- **Headers:** Accept: application/json  
- **Tests:**  
    - Respuesta 404 Not Found  

---

## 5. Actualizar un perfume existente
- **Método:** PUT  
- **URL:** http://localhost:8080/perfumes/1  
- **Headers:** Content-Type: application/json  
- **Body (JSON):**
    ```json
    {
        "id": 1,
        "nombrePerfume": "Aqua Blue",
        "marca": "MarcaX",
        "precio": 12000,
        "fechaPublicacion": 20240601
    }
    ```
- **Tests:**  
    - Respuesta 200 OK y body contiene el objeto Perfume actualizado  

---

## 6. Eliminar un perfume existente
- **Método:** DELETE  
- **URL:** http://localhost:8080/perfumes/1  
- **Tests:**  
    - Respuesta 200 OK y body contiene "Perfume eliminado"  

---