# Postman Test Cases for ProductoController

## 1. Obtener todos los productos
- **Método:** GET  
- **URL:** http://localhost:8080/api/v1/Producto  
- **Headers:** Accept: application/json  
- **Tests:**  
    - Respuesta 200 OK y body es un array (puede estar vacío o tener objetos Producto)  

---

## 2. Crear un producto
- **Método:** POST  
- **URL:** http://localhost:8080/api/v1/Producto  
- **Headers:** Content-Type: application/json  
- **Body (JSON):**
    ```json
    {
        "id_producto": 1,
        "nombre": "ProductoX",
        "precio": 5000,
        "stock_total": 10,
        "categoria": "Fragancia",
        "estado": "disponible"
    }
    ```
- **Tests:**  
    - Respuesta 201 Created y body contiene el objeto Producto creado  

---

## 3. Obtener un producto por ID (existente)
- **Método:** GET  
- **URL:** http://localhost:8080/api/v1/Producto/1  
- **Headers:** Accept: application/json  
- **Tests:**  
    - Respuesta 200 OK y body contiene el objeto Producto con id=1  

---

## 4. Obtener un producto por ID (no existente)
- **Método:** GET  
- **URL:** http://localhost:8080/api/v1/Producto/9999  
- **Headers:** Accept: application/json  
- **Tests:**  
    - Respuesta 404 Not Found  

---

## 5. Actualizar un producto existente
- **Método:** PUT  
- **URL:** http://localhost:8080/api/v1/Producto/1  
- **Headers:** Content-Type: application/json  
- **Body (JSON):**
    ```json
    {
        "id_producto": 1,
        "nombre": "ProductoX Actualizado",
        "precio": 6000,
        "stock_total": 15,
        "categoria": "Fragancia",
        "estado": "agotado"
    }
    ```
- **Tests:**  
    - Respuesta 200 OK y body contiene el objeto Producto actualizado  

---

## 6. Eliminar un producto existente
- **Método:** DELETE  
- **URL:** http://localhost:8080/api/v1/Producto/1  
- **Tests:**  
    - Respuesta 200 OK y body contiene "Producto eliminado exitosamente."  

---